/*
* generated by Xtext
*/
package at.bestsolution.lego.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LegoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRepoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRepoItemRepositoryParserRuleCall_0_0 = (RuleCall)cRepoAssignment_0.eContents().get(0);
		private final Assignment cAssemblyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssemblyAssemblyParserRuleCall_1_0 = (RuleCall)cAssemblyAssignment_1.eContents().get(0);
		
		//Model:
		//	repo=ItemRepository | assembly=Assembly;
		public ParserRule getRule() { return rule; }

		//repo=ItemRepository | assembly=Assembly
		public Alternatives getAlternatives() { return cAlternatives; }

		//repo=ItemRepository
		public Assignment getRepoAssignment_0() { return cRepoAssignment_0; }

		//ItemRepository
		public RuleCall getRepoItemRepositoryParserRuleCall_0_0() { return cRepoItemRepositoryParserRuleCall_0_0; }

		//assembly=Assembly
		public Assignment getAssemblyAssignment_1() { return cAssemblyAssignment_1; }

		//Assembly
		public RuleCall getAssemblyAssemblyParserRuleCall_1_0() { return cAssemblyAssemblyParserRuleCall_1_0; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ItemRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItemRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementListItemParserRuleCall_2_0 = (RuleCall)cElementListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ItemRepository:
		//	name=ValidID "{" elementList+=Item+ "}";
		public ParserRule getRule() { return rule; }

		//name=ValidID "{" elementList+=Item+ "}"
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elementList+=Item+
		public Assignment getElementListAssignment_2() { return cElementListAssignment_2; }

		//Item
		public RuleCall getElementListItemParserRuleCall_2_0() { return cElementListItemParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LegoElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LegoElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssemblyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LegoElement:
		//	Item | Assembly;
		public ParserRule getRule() { return rule; }

		//Item | Assembly
		public Alternatives getAlternatives() { return cAlternatives; }

		//Item
		public RuleCall getItemParserRuleCall_0() { return cItemParserRuleCall_0; }

		//Assembly
		public RuleCall getAssemblyParserRuleCall_1() { return cAssemblyParserRuleCall_1; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBrickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Item:
		//	Brick | Door;
		public ParserRule getRule() { return rule; }

		//Brick | Door
		public Alternatives getAlternatives() { return cAlternatives; }

		//Brick
		public RuleCall getBrickParserRuleCall_0() { return cBrickParserRuleCall_0; }

		//Door
		public RuleCall getDoorParserRuleCall_1() { return cDoorParserRuleCall_1; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRgbKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRINTTerminalRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGINTTerminalRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBINTTerminalRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		
		//Color:
		//	"rgb" r=INT g=INT b=INT;
		public ParserRule getRule() { return rule; }

		//"rgb" r=INT g=INT b=INT
		public Group getGroup() { return cGroup; }

		//"rgb"
		public Keyword getRgbKeyword_0() { return cRgbKeyword_0; }

		//r=INT
		public Assignment getRAssignment_1() { return cRAssignment_1; }

		//INT
		public RuleCall getRINTTerminalRuleCall_1_0() { return cRINTTerminalRuleCall_1_0; }

		//g=INT
		public Assignment getGAssignment_2() { return cGAssignment_2; }

		//INT
		public RuleCall getGINTTerminalRuleCall_2_0() { return cGINTTerminalRuleCall_2_0; }

		//b=INT
		public Assignment getBAssignment_3() { return cBAssignment_3; }

		//INT
		public RuleCall getBINTTerminalRuleCall_3_0() { return cBINTTerminalRuleCall_3_0; }
	}

	public class XUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnit");
		private final Assignment cUnitsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnitsINTTerminalRuleCall_0 = (RuleCall)cUnitsAssignment.eContents().get(0);
		
		//XUnit:
		//	units=INT;
		public ParserRule getRule() { return rule; }

		//units=INT
		public Assignment getUnitsAssignment() { return cUnitsAssignment; }

		//INT
		public RuleCall getUnitsINTTerminalRuleCall_0() { return cUnitsINTTerminalRuleCall_0; }
	}

	public class YUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "YUnit");
		private final Assignment cUnitsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnitsINTTerminalRuleCall_0 = (RuleCall)cUnitsAssignment.eContents().get(0);
		
		//YUnit:
		//	units=INT;
		public ParserRule getRule() { return rule; }

		//units=INT
		public Assignment getUnitsAssignment() { return cUnitsAssignment; }

		//INT
		public RuleCall getUnitsINTTerminalRuleCall_0() { return cUnitsINTTerminalRuleCall_0; }
	}

	public class ZUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ZUnit");
		private final Assignment cUnitsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnitsINTTerminalRuleCall_0 = (RuleCall)cUnitsAssignment.eContents().get(0);
		
		//ZUnit:
		//	units=INT;
		public ParserRule getRule() { return rule; }

		//units=INT
		public Assignment getUnitsAssignment() { return cUnitsAssignment; }

		//INT
		public RuleCall getUnitsINTTerminalRuleCall_0() { return cUnitsINTTerminalRuleCall_0; }
	}

	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUnitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXUnitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXUnitsXUnitParserRuleCall_3_0 = (RuleCall)cXUnitsAssignment_3.eContents().get(0);
		private final Assignment cYUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYUnitsYUnitParserRuleCall_4_0 = (RuleCall)cYUnitsAssignment_4.eContents().get(0);
		private final Assignment cZUnitsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZUnitsZUnitParserRuleCall_5_0 = (RuleCall)cZUnitsAssignment_5.eContents().get(0);
		private final Assignment cFillAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFillColorParserRuleCall_6_0 = (RuleCall)cFillAssignment_6.eContents().get(0);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSourceSourceParserRuleCall_7_0 = (RuleCall)cSourceAssignment_7.eContents().get(0);
		
		//Brick:
		//	"brick" name=ValidID "units" xUnits=XUnit yUnits=YUnit zUnits=ZUnit fill=Color source=Source;
		public ParserRule getRule() { return rule; }

		//"brick" name=ValidID "units" xUnits=XUnit yUnits=YUnit zUnits=ZUnit fill=Color source=Source
		public Group getGroup() { return cGroup; }

		//"brick"
		public Keyword getBrickKeyword_0() { return cBrickKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"units"
		public Keyword getUnitsKeyword_2() { return cUnitsKeyword_2; }

		//xUnits=XUnit
		public Assignment getXUnitsAssignment_3() { return cXUnitsAssignment_3; }

		//XUnit
		public RuleCall getXUnitsXUnitParserRuleCall_3_0() { return cXUnitsXUnitParserRuleCall_3_0; }

		//yUnits=YUnit
		public Assignment getYUnitsAssignment_4() { return cYUnitsAssignment_4; }

		//YUnit
		public RuleCall getYUnitsYUnitParserRuleCall_4_0() { return cYUnitsYUnitParserRuleCall_4_0; }

		//zUnits=ZUnit
		public Assignment getZUnitsAssignment_5() { return cZUnitsAssignment_5; }

		//ZUnit
		public RuleCall getZUnitsZUnitParserRuleCall_5_0() { return cZUnitsZUnitParserRuleCall_5_0; }

		//fill=Color
		public Assignment getFillAssignment_6() { return cFillAssignment_6; }

		//Color
		public RuleCall getFillColorParserRuleCall_6_0() { return cFillColorParserRuleCall_6_0; }

		//source=Source
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }

		//Source
		public RuleCall getSourceSourceParserRuleCall_7_0() { return cSourceSourceParserRuleCall_7_0; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeneratedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFxmlIncludeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Source:
		//	Generated | FxmlInclude;
		public ParserRule getRule() { return rule; }

		//Generated | FxmlInclude
		public Alternatives getAlternatives() { return cAlternatives; }

		//Generated
		public RuleCall getGeneratedParserRuleCall_0() { return cGeneratedParserRuleCall_0; }

		//FxmlInclude
		public RuleCall getFxmlIncludeParserRuleCall_1() { return cFxmlIncludeParserRuleCall_1; }
	}

	public class GeneratedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generated");
		private final Keyword cGeneratedKeyword = (Keyword)rule.eContents().get(1);
		
		//Generated:
		//	"generated";
		public ParserRule getRule() { return rule; }

		//"generated"
		public Keyword getGeneratedKeyword() { return cGeneratedKeyword; }
	}

	public class FxmlIncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FxmlInclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFxmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSource2dAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSource2dSTRINGTerminalRuleCall_3_0 = (RuleCall)cSource2dAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSource3dAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSource3dSTRINGTerminalRuleCall_7_0 = (RuleCall)cSource3dAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOriginKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOriginXAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOriginXFLOATTerminalRuleCall_8_1_0 = (RuleCall)cOriginXAssignment_8_1.eContents().get(0);
		private final Assignment cOriginYAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOriginYFLOATTerminalRuleCall_8_2_0 = (RuleCall)cOriginYAssignment_8_2.eContents().get(0);
		private final Assignment cOriginZAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cOriginZFLOATTerminalRuleCall_8_3_0 = (RuleCall)cOriginZAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FxmlInclude:
		//	"fxml" "2d" "{" source2d=STRING "}" "3d" "{" source3d=STRING ("origin" originX=FLOAT originY=FLOAT originZ=FLOAT)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//"fxml" "2d" "{" source2d=STRING "}" "3d" "{" source3d=STRING ("origin" originX=FLOAT originY=FLOAT originZ=FLOAT)? "}"
		public Group getGroup() { return cGroup; }

		//"fxml"
		public Keyword getFxmlKeyword_0() { return cFxmlKeyword_0; }

		//"2d"
		public Keyword getDKeyword_1() { return cDKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//source2d=STRING
		public Assignment getSource2dAssignment_3() { return cSource2dAssignment_3; }

		//STRING
		public RuleCall getSource2dSTRINGTerminalRuleCall_3_0() { return cSource2dSTRINGTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//"3d"
		public Keyword getDKeyword_5() { return cDKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//source3d=STRING
		public Assignment getSource3dAssignment_7() { return cSource3dAssignment_7; }

		//STRING
		public RuleCall getSource3dSTRINGTerminalRuleCall_7_0() { return cSource3dSTRINGTerminalRuleCall_7_0; }

		//("origin" originX=FLOAT originY=FLOAT originZ=FLOAT)?
		public Group getGroup_8() { return cGroup_8; }

		//"origin"
		public Keyword getOriginKeyword_8_0() { return cOriginKeyword_8_0; }

		//originX=FLOAT
		public Assignment getOriginXAssignment_8_1() { return cOriginXAssignment_8_1; }

		//FLOAT
		public RuleCall getOriginXFLOATTerminalRuleCall_8_1_0() { return cOriginXFLOATTerminalRuleCall_8_1_0; }

		//originY=FLOAT
		public Assignment getOriginYAssignment_8_2() { return cOriginYAssignment_8_2; }

		//FLOAT
		public RuleCall getOriginYFLOATTerminalRuleCall_8_2_0() { return cOriginYFLOATTerminalRuleCall_8_2_0; }

		//originZ=FLOAT
		public Assignment getOriginZAssignment_8_3() { return cOriginZAssignment_8_3; }

		//FLOAT
		public RuleCall getOriginZFLOATTerminalRuleCall_8_3_0() { return cOriginZFLOATTerminalRuleCall_8_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUnitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXUnitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXUnitsXUnitParserRuleCall_3_0 = (RuleCall)cXUnitsAssignment_3.eContents().get(0);
		private final Assignment cYUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYUnitsYUnitParserRuleCall_4_0 = (RuleCall)cYUnitsAssignment_4.eContents().get(0);
		private final Assignment cFillAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFillColorParserRuleCall_5_0 = (RuleCall)cFillAssignment_5.eContents().get(0);
		
		//Door:
		//	"door" name=ValidID "units" xUnits=XUnit yUnits=YUnit fill=Color;
		public ParserRule getRule() { return rule; }

		//"door" name=ValidID "units" xUnits=XUnit yUnits=YUnit fill=Color
		public Group getGroup() { return cGroup; }

		//"door"
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"units"
		public Keyword getUnitsKeyword_2() { return cUnitsKeyword_2; }

		//xUnits=XUnit
		public Assignment getXUnitsAssignment_3() { return cXUnitsAssignment_3; }

		//XUnit
		public RuleCall getXUnitsXUnitParserRuleCall_3_0() { return cXUnitsXUnitParserRuleCall_3_0; }

		//yUnits=YUnit
		public Assignment getYUnitsAssignment_4() { return cYUnitsAssignment_4; }

		//YUnit
		public RuleCall getYUnitsYUnitParserRuleCall_4_0() { return cYUnitsYUnitParserRuleCall_4_0; }

		//fill=Color
		public Assignment getFillAssignment_5() { return cFillAssignment_5; }

		//Color
		public RuleCall getFillColorParserRuleCall_5_0() { return cFillColorParserRuleCall_5_0; }
	}

	public class AssemblyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assembly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssemblyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemsAssemblyItemParserRuleCall_3_0 = (RuleCall)cItemsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Assembly:
		//	"assembly" name=ValidID "{" items+=AssemblyItem+ "}";
		public ParserRule getRule() { return rule; }

		//"assembly" name=ValidID "{" items+=AssemblyItem+ "}"
		public Group getGroup() { return cGroup; }

		//"assembly"
		public Keyword getAssemblyKeyword_0() { return cAssemblyKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//items+=AssemblyItem+
		public Assignment getItemsAssignment_3() { return cItemsAssignment_3; }

		//AssemblyItem
		public RuleCall getItemsAssemblyItemParserRuleCall_3_0() { return cItemsAssemblyItemParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AssemblyItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssemblyItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cElementLegoElementCrossReference_0_0 = (CrossReference)cElementAssignment_0.eContents().get(0);
		private final RuleCall cElementLegoElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cElementLegoElementCrossReference_0_0.eContents().get(1);
		private final Keyword cPosKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXUnitsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXUnitsXUnitParserRuleCall_2_0 = (RuleCall)cXUnitsAssignment_2.eContents().get(0);
		private final Assignment cYUnitsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYUnitsYUnitParserRuleCall_3_0 = (RuleCall)cYUnitsAssignment_3.eContents().get(0);
		private final Assignment cZUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZUnitsZUnitParserRuleCall_4_0 = (RuleCall)cZUnitsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTransformKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTransformAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cTransformAlternatives_5_1_0 = (Alternatives)cTransformAssignment_5_1.eContents().get(0);
		private final Keyword cTransformRotate180Keyword_5_1_0_0 = (Keyword)cTransformAlternatives_5_1_0.eContents().get(0);
		private final Keyword cTransformRotate90Keyword_5_1_0_1 = (Keyword)cTransformAlternatives_5_1_0.eContents().get(1);
		private final Keyword cTransformRotate270Keyword_5_1_0_2 = (Keyword)cTransformAlternatives_5_1_0.eContents().get(2);
		
		//AssemblyItem:
		//	element=[LegoElement|QualifiedName] "pos" xUnits=XUnit yUnits=YUnit zUnits=ZUnit ("transform" transform=("rotate180" |
		//	"rotate90" | "rotate270"))?;
		public ParserRule getRule() { return rule; }

		//element=[LegoElement|QualifiedName] "pos" xUnits=XUnit yUnits=YUnit zUnits=ZUnit ("transform" transform=("rotate180" |
		//"rotate90" | "rotate270"))?
		public Group getGroup() { return cGroup; }

		//element=[LegoElement|QualifiedName]
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//[LegoElement|QualifiedName]
		public CrossReference getElementLegoElementCrossReference_0_0() { return cElementLegoElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getElementLegoElementQualifiedNameParserRuleCall_0_0_1() { return cElementLegoElementQualifiedNameParserRuleCall_0_0_1; }

		//"pos"
		public Keyword getPosKeyword_1() { return cPosKeyword_1; }

		//xUnits=XUnit
		public Assignment getXUnitsAssignment_2() { return cXUnitsAssignment_2; }

		//XUnit
		public RuleCall getXUnitsXUnitParserRuleCall_2_0() { return cXUnitsXUnitParserRuleCall_2_0; }

		//yUnits=YUnit
		public Assignment getYUnitsAssignment_3() { return cYUnitsAssignment_3; }

		//YUnit
		public RuleCall getYUnitsYUnitParserRuleCall_3_0() { return cYUnitsYUnitParserRuleCall_3_0; }

		//zUnits=ZUnit
		public Assignment getZUnitsAssignment_4() { return cZUnitsAssignment_4; }

		//ZUnit
		public RuleCall getZUnitsZUnitParserRuleCall_4_0() { return cZUnitsZUnitParserRuleCall_4_0; }

		//("transform" transform=("rotate180" | "rotate90" | "rotate270"))?
		public Group getGroup_5() { return cGroup_5; }

		//"transform"
		public Keyword getTransformKeyword_5_0() { return cTransformKeyword_5_0; }

		//transform=("rotate180" | "rotate90" | "rotate270")
		public Assignment getTransformAssignment_5_1() { return cTransformAssignment_5_1; }

		//"rotate180" | "rotate90" | "rotate270"
		public Alternatives getTransformAlternatives_5_1_0() { return cTransformAlternatives_5_1_0; }

		//"rotate180"
		public Keyword getTransformRotate180Keyword_5_1_0_0() { return cTransformRotate180Keyword_5_1_0_0; }

		//"rotate90"
		public Keyword getTransformRotate90Keyword_5_1_0_1() { return cTransformRotate90Keyword_5_1_0_1; }

		//"rotate270"
		public Keyword getTransformRotate270Keyword_5_1_0_2() { return cTransformRotate270Keyword_5_1_0_2; }
	}
	
	
	private final ModelElements pModel;
	private final ValidIDElements pValidID;
	private final QualifiedNameElements pQualifiedName;
	private final ItemRepositoryElements pItemRepository;
	private final LegoElementElements pLegoElement;
	private final ItemElements pItem;
	private final ColorElements pColor;
	private final XUnitElements pXUnit;
	private final YUnitElements pYUnit;
	private final ZUnitElements pZUnit;
	private final BrickElements pBrick;
	private final SourceElements pSource;
	private final GeneratedElements pGenerated;
	private final FxmlIncludeElements pFxmlInclude;
	private final DoorElements pDoor;
	private final AssemblyElements pAssembly;
	private final AssemblyItemElements pAssemblyItem;
	private final TerminalRule tINT;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LegoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pValidID = new ValidIDElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pItemRepository = new ItemRepositoryElements();
		this.pLegoElement = new LegoElementElements();
		this.pItem = new ItemElements();
		this.pColor = new ColorElements();
		this.pXUnit = new XUnitElements();
		this.pYUnit = new YUnitElements();
		this.pZUnit = new ZUnitElements();
		this.pBrick = new BrickElements();
		this.pSource = new SourceElements();
		this.pGenerated = new GeneratedElements();
		this.pFxmlInclude = new FxmlIncludeElements();
		this.pDoor = new DoorElements();
		this.pAssembly = new AssemblyElements();
		this.pAssemblyItem = new AssemblyItemElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.bestsolution.lego.Lego".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	repo=ItemRepository | assembly=Assembly;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ItemRepository:
	//	name=ValidID "{" elementList+=Item+ "}";
	public ItemRepositoryElements getItemRepositoryAccess() {
		return pItemRepository;
	}
	
	public ParserRule getItemRepositoryRule() {
		return getItemRepositoryAccess().getRule();
	}

	//LegoElement:
	//	Item | Assembly;
	public LegoElementElements getLegoElementAccess() {
		return pLegoElement;
	}
	
	public ParserRule getLegoElementRule() {
		return getLegoElementAccess().getRule();
	}

	//Item:
	//	Brick | Door;
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//Color:
	//	"rgb" r=INT g=INT b=INT;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//XUnit:
	//	units=INT;
	public XUnitElements getXUnitAccess() {
		return pXUnit;
	}
	
	public ParserRule getXUnitRule() {
		return getXUnitAccess().getRule();
	}

	//YUnit:
	//	units=INT;
	public YUnitElements getYUnitAccess() {
		return pYUnit;
	}
	
	public ParserRule getYUnitRule() {
		return getYUnitAccess().getRule();
	}

	//ZUnit:
	//	units=INT;
	public ZUnitElements getZUnitAccess() {
		return pZUnit;
	}
	
	public ParserRule getZUnitRule() {
		return getZUnitAccess().getRule();
	}

	//Brick:
	//	"brick" name=ValidID "units" xUnits=XUnit yUnits=YUnit zUnits=ZUnit fill=Color source=Source;
	public BrickElements getBrickAccess() {
		return pBrick;
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}

	//Source:
	//	Generated | FxmlInclude;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//Generated:
	//	"generated";
	public GeneratedElements getGeneratedAccess() {
		return pGenerated;
	}
	
	public ParserRule getGeneratedRule() {
		return getGeneratedAccess().getRule();
	}

	//FxmlInclude:
	//	"fxml" "2d" "{" source2d=STRING "}" "3d" "{" source3d=STRING ("origin" originX=FLOAT originY=FLOAT originZ=FLOAT)?
	//	"}";
	public FxmlIncludeElements getFxmlIncludeAccess() {
		return pFxmlInclude;
	}
	
	public ParserRule getFxmlIncludeRule() {
		return getFxmlIncludeAccess().getRule();
	}

	//Door:
	//	"door" name=ValidID "units" xUnits=XUnit yUnits=YUnit fill=Color;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}

	//Assembly:
	//	"assembly" name=ValidID "{" items+=AssemblyItem+ "}";
	public AssemblyElements getAssemblyAccess() {
		return pAssembly;
	}
	
	public ParserRule getAssemblyRule() {
		return getAssemblyAccess().getRule();
	}

	//AssemblyItem:
	//	element=[LegoElement|QualifiedName] "pos" xUnits=XUnit yUnits=YUnit zUnits=ZUnit ("transform" transform=("rotate180" |
	//	"rotate90" | "rotate270"))?;
	public AssemblyItemElements getAssemblyItemAccess() {
		return pAssemblyItem;
	}
	
	public ParserRule getAssemblyItemRule() {
		return getAssemblyItemAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal FLOAT returns ecore::EFloat:
	//	"-"? "0".."9"+ "." "0".."9"*;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
