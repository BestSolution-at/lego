/*
* generated by Xtext
*/
grammar InternalLego;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.lego.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.lego.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.lego.services.LegoGrammarAccess;

}

@parser::members {

 	private LegoGrammarAccess grammarAccess;
 	
    public InternalLegoParser(TokenStream input, LegoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected LegoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRepoItemRepositoryParserRuleCall_0_0()); 
	    }
		lv_repo_0_0=ruleItemRepository		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"repo",
        		lv_repo_0_0, 
        		"ItemRepository");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAssemblyAssemblyParserRuleCall_1_0()); 
	    }
		lv_assembly_1_0=ruleAssembly		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"assembly",
        		lv_assembly_1_0, 
        		"Assembly");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleItemRepository
entryRuleItemRepository returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRepositoryRule()); }
	 iv_ruleItemRepository=ruleItemRepository 
	 { $current=$iv_ruleItemRepository.current; } 
	 EOF 
;

// Rule ItemRepository
ruleItemRepository returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getItemRepositoryAccess().getNameValidIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemRepositoryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getItemRepositoryAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getItemRepositoryAccess().getElementListItemParserRuleCall_2_0()); 
	    }
		lv_elementList_2_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemRepositoryRule());
	        }
       		add(
       			$current, 
       			"elementList",
        		lv_elementList_2_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getItemRepositoryAccess().getRightCurlyBracketKeyword_3());
    }
)
;







// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getItemAccess().getBrickParserRuleCall_0()); 
    }
    this_Brick_0=ruleBrick
    { 
        $current = $this_Brick_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getItemAccess().getRoundBrickParserRuleCall_1()); 
    }
    this_RoundBrick_1=ruleRoundBrick
    { 
        $current = $this_RoundBrick_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getItemAccess().getDoorBrickParserRuleCall_2()); 
    }
    this_DoorBrick_2=ruleDoorBrick
    { 
        $current = $this_DoorBrick_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getItemAccess().getDoorParserRuleCall_3()); 
    }
    this_Door_3=ruleDoor
    { 
        $current = $this_Door_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current; } 
	 EOF 
;

// Rule Color
ruleColor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rgb' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getColorAccess().getRgbKeyword_0());
    }
(
(
		lv_r_1_0=RULE_INT
		{
			newLeafNode(lv_r_1_0, grammarAccess.getColorAccess().getRINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"r",
        		lv_r_1_0, 
        		"INT");
	    }

)
)(
(
		lv_g_2_0=RULE_INT
		{
			newLeafNode(lv_g_2_0, grammarAccess.getColorAccess().getGINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"g",
        		lv_g_2_0, 
        		"INT");
	    }

)
)(
(
		lv_b_3_0=RULE_INT
		{
			newLeafNode(lv_b_3_0, grammarAccess.getColorAccess().getBINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"b",
        		lv_b_3_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleXUnit
entryRuleXUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXUnitRule()); }
	 iv_ruleXUnit=ruleXUnit 
	 { $current=$iv_ruleXUnit.current; } 
	 EOF 
;

// Rule XUnit
ruleXUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_units_0_0=RULE_INT
		{
			newLeafNode(lv_units_0_0, grammarAccess.getXUnitAccess().getUnitsINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"units",
        		lv_units_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleYUnit
entryRuleYUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getYUnitRule()); }
	 iv_ruleYUnit=ruleYUnit 
	 { $current=$iv_ruleYUnit.current; } 
	 EOF 
;

// Rule YUnit
ruleYUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_units_0_0=RULE_INT
		{
			newLeafNode(lv_units_0_0, grammarAccess.getYUnitAccess().getUnitsINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getYUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"units",
        		lv_units_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleZUnit
entryRuleZUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getZUnitRule()); }
	 iv_ruleZUnit=ruleZUnit 
	 { $current=$iv_ruleZUnit.current; } 
	 EOF 
;

// Rule ZUnit
ruleZUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_units_0_0=RULE_INT
		{
			newLeafNode(lv_units_0_0, grammarAccess.getZUnitAccess().getUnitsINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getZUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"units",
        		lv_units_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleBrick
entryRuleBrick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBrickRule()); }
	 iv_ruleBrick=ruleBrick 
	 { $current=$iv_ruleBrick.current; } 
	 EOF 
;

// Rule Brick
ruleBrick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='brick' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBrickAccess().getBrickKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBrickAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBrickRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='units' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBrickAccess().getUnitsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBrickAccess().getXUnitsXUnitParserRuleCall_3_0()); 
	    }
		lv_xUnits_3_0=ruleXUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBrickRule());
	        }
       		set(
       			$current, 
       			"xUnits",
        		lv_xUnits_3_0, 
        		"XUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBrickAccess().getYUnitsYUnitParserRuleCall_4_0()); 
	    }
		lv_yUnits_4_0=ruleYUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBrickRule());
	        }
       		set(
       			$current, 
       			"yUnits",
        		lv_yUnits_4_0, 
        		"YUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBrickAccess().getZUnitsZUnitParserRuleCall_5_0()); 
	    }
		lv_zUnits_5_0=ruleZUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBrickRule());
	        }
       		set(
       			$current, 
       			"zUnits",
        		lv_zUnits_5_0, 
        		"ZUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBrickAccess().getFillColorParserRuleCall_6_0()); 
	    }
		lv_fill_6_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBrickRule());
	        }
       		set(
       			$current, 
       			"fill",
        		lv_fill_6_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRoundBrick
entryRuleRoundBrick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoundBrickRule()); }
	 iv_ruleRoundBrick=ruleRoundBrick 
	 { $current=$iv_ruleRoundBrick.current; } 
	 EOF 
;

// Rule RoundBrick
ruleRoundBrick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rbrick' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRoundBrickAccess().getRbrickKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundBrickAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundBrickRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='units' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRoundBrickAccess().getUnitsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundBrickAccess().getXUnitsXUnitParserRuleCall_3_0()); 
	    }
		lv_xUnits_3_0=ruleXUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundBrickRule());
	        }
       		set(
       			$current, 
       			"xUnits",
        		lv_xUnits_3_0, 
        		"XUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundBrickAccess().getYUnitsYUnitParserRuleCall_4_0()); 
	    }
		lv_yUnits_4_0=ruleYUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundBrickRule());
	        }
       		set(
       			$current, 
       			"yUnits",
        		lv_yUnits_4_0, 
        		"YUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundBrickAccess().getZUnitsZUnitParserRuleCall_5_0()); 
	    }
		lv_zUnits_5_0=ruleZUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundBrickRule());
	        }
       		set(
       			$current, 
       			"zUnits",
        		lv_zUnits_5_0, 
        		"ZUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRoundBrickAccess().getFillColorParserRuleCall_6_0()); 
	    }
		lv_fill_6_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoundBrickRule());
	        }
       		set(
       			$current, 
       			"fill",
        		lv_fill_6_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoorBrick
entryRuleDoorBrick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoorBrickRule()); }
	 iv_ruleDoorBrick=ruleDoorBrick 
	 { $current=$iv_ruleDoorBrick.current; } 
	 EOF 
;

// Rule DoorBrick
ruleDoorBrick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dbrick' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoorBrickAccess().getDbrickKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorBrickAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorBrickRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='units' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoorBrickAccess().getUnitsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorBrickAccess().getXUnitsXUnitParserRuleCall_3_0()); 
	    }
		lv_xUnits_3_0=ruleXUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorBrickRule());
	        }
       		set(
       			$current, 
       			"xUnits",
        		lv_xUnits_3_0, 
        		"XUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorBrickAccess().getYUnitsYUnitParserRuleCall_4_0()); 
	    }
		lv_yUnits_4_0=ruleYUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorBrickRule());
	        }
       		set(
       			$current, 
       			"yUnits",
        		lv_yUnits_4_0, 
        		"YUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorBrickAccess().getZUnitsZUnitParserRuleCall_5_0()); 
	    }
		lv_zUnits_5_0=ruleZUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorBrickRule());
	        }
       		set(
       			$current, 
       			"zUnits",
        		lv_zUnits_5_0, 
        		"ZUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorBrickAccess().getFillColorParserRuleCall_6_0()); 
	    }
		lv_fill_6_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorBrickRule());
	        }
       		set(
       			$current, 
       			"fill",
        		lv_fill_6_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoor
entryRuleDoor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoorRule()); }
	 iv_ruleDoor=ruleDoor 
	 { $current=$iv_ruleDoor.current; } 
	 EOF 
;

// Rule Door
ruleDoor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='door' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoorAccess().getDoorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='units' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoorAccess().getUnitsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorAccess().getXUnitsXUnitParserRuleCall_3_0()); 
	    }
		lv_xUnits_3_0=ruleXUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorRule());
	        }
       		set(
       			$current, 
       			"xUnits",
        		lv_xUnits_3_0, 
        		"XUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorAccess().getYUnitsYUnitParserRuleCall_4_0()); 
	    }
		lv_yUnits_4_0=ruleYUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorRule());
	        }
       		set(
       			$current, 
       			"yUnits",
        		lv_yUnits_4_0, 
        		"YUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDoorAccess().getFillColorParserRuleCall_5_0()); 
	    }
		lv_fill_5_0=ruleColor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoorRule());
	        }
       		set(
       			$current, 
       			"fill",
        		lv_fill_5_0, 
        		"Color");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssembly
entryRuleAssembly returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssemblyRule()); }
	 iv_ruleAssembly=ruleAssembly 
	 { $current=$iv_ruleAssembly.current; } 
	 EOF 
;

// Rule Assembly
ruleAssembly returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assembly' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssemblyAccess().getAssemblyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssemblyAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssemblyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssemblyAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssemblyAccess().getItemsAssemblyItemParserRuleCall_3_0()); 
	    }
		lv_items_3_0=ruleAssemblyItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssemblyRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"AssemblyItem");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssemblyAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAssemblyItem
entryRuleAssemblyItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssemblyItemRule()); }
	 iv_ruleAssemblyItem=ruleAssemblyItem 
	 { $current=$iv_ruleAssemblyItem.current; } 
	 EOF 
;

// Rule AssemblyItem
ruleAssemblyItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssemblyItemRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAssemblyItemAccess().getElementLegoElementCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='pos' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssemblyItemAccess().getPosKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssemblyItemAccess().getXUnitsXUnitParserRuleCall_2_0()); 
	    }
		lv_xUnits_2_0=ruleXUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssemblyItemRule());
	        }
       		set(
       			$current, 
       			"xUnits",
        		lv_xUnits_2_0, 
        		"XUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssemblyItemAccess().getYUnitsYUnitParserRuleCall_3_0()); 
	    }
		lv_yUnits_3_0=ruleYUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssemblyItemRule());
	        }
       		set(
       			$current, 
       			"yUnits",
        		lv_yUnits_3_0, 
        		"YUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssemblyItemAccess().getZUnitsZUnitParserRuleCall_4_0()); 
	    }
		lv_zUnits_4_0=ruleZUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssemblyItemRule());
	        }
       		set(
       			$current, 
       			"zUnits",
        		lv_zUnits_4_0, 
        		"ZUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='transform' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAssemblyItemAccess().getTransformKeyword_5_0());
    }
(
(
(
		lv_transform_6_1=	'mirror-x' 
    {
        newLeafNode(lv_transform_6_1, grammarAccess.getAssemblyItemAccess().getTransformMirrorXKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssemblyItemRule());
	        }
       		setWithLastConsumed($current, "transform", lv_transform_6_1, null);
	    }

    |		lv_transform_6_2=	'mirror-y' 
    {
        newLeafNode(lv_transform_6_2, grammarAccess.getAssemblyItemAccess().getTransformMirrorYKeyword_5_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssemblyItemRule());
	        }
       		setWithLastConsumed($current, "transform", lv_transform_6_2, null);
	    }

)

)
))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


