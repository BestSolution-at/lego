/*
* generated by Xtext
*/
package at.bestsolution.lego.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.lego.services.LegoGrammarAccess;

public class LegoParser extends AbstractContentAssistParser {
	
	@Inject
	private LegoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.lego.ui.contentassist.antlr.internal.InternalLegoParser createParser() {
		at.bestsolution.lego.ui.contentassist.antlr.internal.InternalLegoParser result = new at.bestsolution.lego.ui.contentassist.antlr.internal.InternalLegoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getLegoElementAccess().getAlternatives(), "rule__LegoElement__Alternatives");
					put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
					put(grammarAccess.getSourceAccess().getAlternatives(), "rule__Source__Alternatives");
					put(grammarAccess.getAssemblyItemAccess().getTransformAlternatives_5_1_0(), "rule__AssemblyItem__TransformAlternatives_5_1_0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getItemRepositoryAccess().getGroup(), "rule__ItemRepository__Group__0");
					put(grammarAccess.getColorAccess().getGroup(), "rule__Color__Group__0");
					put(grammarAccess.getBrickAccess().getGroup(), "rule__Brick__Group__0");
					put(grammarAccess.getFxmlIncludeAccess().getGroup(), "rule__FxmlInclude__Group__0");
					put(grammarAccess.getFxmlIncludeAccess().getGroup_2(), "rule__FxmlInclude__Group_2__0");
					put(grammarAccess.getRoundBrickAccess().getGroup(), "rule__RoundBrick__Group__0");
					put(grammarAccess.getDoorBrickAccess().getGroup(), "rule__DoorBrick__Group__0");
					put(grammarAccess.getDoorAccess().getGroup(), "rule__Door__Group__0");
					put(grammarAccess.getAssemblyAccess().getGroup(), "rule__Assembly__Group__0");
					put(grammarAccess.getAssemblyItemAccess().getGroup(), "rule__AssemblyItem__Group__0");
					put(grammarAccess.getAssemblyItemAccess().getGroup_5(), "rule__AssemblyItem__Group_5__0");
					put(grammarAccess.getModelAccess().getRepoAssignment_0(), "rule__Model__RepoAssignment_0");
					put(grammarAccess.getModelAccess().getAssemblyAssignment_1(), "rule__Model__AssemblyAssignment_1");
					put(grammarAccess.getItemRepositoryAccess().getNameAssignment_0(), "rule__ItemRepository__NameAssignment_0");
					put(grammarAccess.getItemRepositoryAccess().getElementListAssignment_2(), "rule__ItemRepository__ElementListAssignment_2");
					put(grammarAccess.getColorAccess().getRAssignment_1(), "rule__Color__RAssignment_1");
					put(grammarAccess.getColorAccess().getGAssignment_2(), "rule__Color__GAssignment_2");
					put(grammarAccess.getColorAccess().getBAssignment_3(), "rule__Color__BAssignment_3");
					put(grammarAccess.getXUnitAccess().getUnitsAssignment(), "rule__XUnit__UnitsAssignment");
					put(grammarAccess.getYUnitAccess().getUnitsAssignment(), "rule__YUnit__UnitsAssignment");
					put(grammarAccess.getZUnitAccess().getUnitsAssignment(), "rule__ZUnit__UnitsAssignment");
					put(grammarAccess.getBrickAccess().getNameAssignment_1(), "rule__Brick__NameAssignment_1");
					put(grammarAccess.getBrickAccess().getXUnitsAssignment_3(), "rule__Brick__XUnitsAssignment_3");
					put(grammarAccess.getBrickAccess().getYUnitsAssignment_4(), "rule__Brick__YUnitsAssignment_4");
					put(grammarAccess.getBrickAccess().getZUnitsAssignment_5(), "rule__Brick__ZUnitsAssignment_5");
					put(grammarAccess.getBrickAccess().getFillAssignment_6(), "rule__Brick__FillAssignment_6");
					put(grammarAccess.getBrickAccess().getSourceAssignment_7(), "rule__Brick__SourceAssignment_7");
					put(grammarAccess.getFxmlIncludeAccess().getSourceAssignment_1(), "rule__FxmlInclude__SourceAssignment_1");
					put(grammarAccess.getFxmlIncludeAccess().getOriginXAssignment_2_1(), "rule__FxmlInclude__OriginXAssignment_2_1");
					put(grammarAccess.getFxmlIncludeAccess().getOriginYAssignment_2_2(), "rule__FxmlInclude__OriginYAssignment_2_2");
					put(grammarAccess.getFxmlIncludeAccess().getOriginZAssignment_2_3(), "rule__FxmlInclude__OriginZAssignment_2_3");
					put(grammarAccess.getRoundBrickAccess().getNameAssignment_1(), "rule__RoundBrick__NameAssignment_1");
					put(grammarAccess.getRoundBrickAccess().getXUnitsAssignment_3(), "rule__RoundBrick__XUnitsAssignment_3");
					put(grammarAccess.getRoundBrickAccess().getYUnitsAssignment_4(), "rule__RoundBrick__YUnitsAssignment_4");
					put(grammarAccess.getRoundBrickAccess().getZUnitsAssignment_5(), "rule__RoundBrick__ZUnitsAssignment_5");
					put(grammarAccess.getRoundBrickAccess().getFillAssignment_6(), "rule__RoundBrick__FillAssignment_6");
					put(grammarAccess.getDoorBrickAccess().getNameAssignment_1(), "rule__DoorBrick__NameAssignment_1");
					put(grammarAccess.getDoorBrickAccess().getXUnitsAssignment_3(), "rule__DoorBrick__XUnitsAssignment_3");
					put(grammarAccess.getDoorBrickAccess().getYUnitsAssignment_4(), "rule__DoorBrick__YUnitsAssignment_4");
					put(grammarAccess.getDoorBrickAccess().getZUnitsAssignment_5(), "rule__DoorBrick__ZUnitsAssignment_5");
					put(grammarAccess.getDoorBrickAccess().getFillAssignment_6(), "rule__DoorBrick__FillAssignment_6");
					put(grammarAccess.getDoorAccess().getNameAssignment_1(), "rule__Door__NameAssignment_1");
					put(grammarAccess.getDoorAccess().getXUnitsAssignment_3(), "rule__Door__XUnitsAssignment_3");
					put(grammarAccess.getDoorAccess().getYUnitsAssignment_4(), "rule__Door__YUnitsAssignment_4");
					put(grammarAccess.getDoorAccess().getFillAssignment_5(), "rule__Door__FillAssignment_5");
					put(grammarAccess.getAssemblyAccess().getNameAssignment_1(), "rule__Assembly__NameAssignment_1");
					put(grammarAccess.getAssemblyAccess().getItemsAssignment_3(), "rule__Assembly__ItemsAssignment_3");
					put(grammarAccess.getAssemblyItemAccess().getElementAssignment_0(), "rule__AssemblyItem__ElementAssignment_0");
					put(grammarAccess.getAssemblyItemAccess().getXUnitsAssignment_2(), "rule__AssemblyItem__XUnitsAssignment_2");
					put(grammarAccess.getAssemblyItemAccess().getYUnitsAssignment_3(), "rule__AssemblyItem__YUnitsAssignment_3");
					put(grammarAccess.getAssemblyItemAccess().getZUnitsAssignment_4(), "rule__AssemblyItem__ZUnitsAssignment_4");
					put(grammarAccess.getAssemblyItemAccess().getTransformAssignment_5_1(), "rule__AssemblyItem__TransformAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.lego.ui.contentassist.antlr.internal.InternalLegoParser typedParser = (at.bestsolution.lego.ui.contentassist.antlr.internal.InternalLegoParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LegoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LegoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
